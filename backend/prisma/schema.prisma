// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Rol {
  ADMIN
  COLABORADOR
  CLIENTE
}

enum EstadoTarea {
  PENDIENTE
  EN_PROGRESO
  COMPLETADA
}

enum PrioridadTarea {
  BAJA
  MEDIA
  ALTA
}

model Empresa {
  id           Int          @id @default(autoincrement())
  nombre       String
  color        String       @default("#FFFFFF")
  usuarios     Usuario[]    @relation("EmpresasUsuarios")
  proyectos    Proyecto[]
  invitaciones Invitacion[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Usuario {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  nombre    String
  avatar    String?
  proveedor String
  oauthId   String
  rol       Rol

  // M:N con Empresa
  empresas Empresa[] @relation("EmpresasUsuarios")

  // M:N con Tarea (asignaciones)
  tareas Tarea[] @relation("UsuariosAsignados")

  timers    Timer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Proyecto {
  id             Int      @id @default(autoincrement())
  nombre         String
  descripcion    String?
  horasMensuales Int?
  empresaId      Int
  empresa        Empresa  @relation(fields: [empresaId], references: [id])
  tareas         Tarea[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([empresaId])
}

model Tarea {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  proyectoId  Int
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])

  // M:N impl√≠cita con Usuario
  usuariosAsignados Usuario[] @relation("UsuariosAsignados")

  timers    Timer[]
  estado    EstadoTarea    @default(PENDIENTE)
  prioridad PrioridadTarea @default(MEDIA)

  // üëá NUEVO: orden dentro de la columna (estado)
  posicion Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // √çndices √∫tiles para el Kanban
  @@index([proyectoId, estado, posicion])
  @@index([proyectoId])
}

model Timer {
  id        Int       @id @default(autoincrement())
  inicio    DateTime  @default(now())
  fin       DateTime?
  usuarioId Int
  tareaId   Int

  // NUEVO:
  note      String?
  source    String  @default("timer")
  activeKey String? // 'ACTIVE' si est√° en marcha; NULL si est√° parado

  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  tarea     Tarea    @relation(fields: [tareaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // üëá Garantiza 1 solo timer activo por usuario (solo se colisiona cuando activeKey='ACTIVE')
  @@unique([usuarioId, activeKey])
  @@index([usuarioId])
  @@index([tareaId])
  @@index([inicio])
}

model Invitacion {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  empresaId Int
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
  aceptada  Boolean  @default(false)
  createdAt DateTime @default(now())
}
